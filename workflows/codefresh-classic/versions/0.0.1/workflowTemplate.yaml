apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: argo-hub.codefresh-classic.0.0.1
  annotations:
    argo-hub/version: '0.0.1'
    argo-hub/description: 'Templates that execute operations against the Codefresh classic platform'
    argo-hub/license: 'MIT'
    argo-hub/owner_name: 'Itai Gendler'
    argo-hub/owner_email: 'itai@codefresh.io'
    argo-hub/owner_avatar: 'https://avatars.githubusercontent.com/u/10414627?s=120&v=4'
    argo-hub/owner_url: 'https://github.com/itai-codefresh'
    argo-hub/categories: 'codefresh'
    argo-hub/icon_url: "https://cdn.jsdelivr.net/gh/codefresh-io/argo-hub@main/workflows/codefresh-classic/assets/icon.svg"
    argo-hub/icon_background: "#f4f4f4"
spec:
  volumes:
    - name: cli
      emptyDir: {}

  templates:
    - name: run-pipeline
      metadata:
        annotations:
          argo-hub-template/description: 'A wrapper on top of Codefresh cli run operation'
          argo-hub-template/icon_url: "https://cdn.jsdelivr.net/gh/codefresh-io/argo-hub@main/workflows/codefresh-classic/assets/icon.svg"
          argo-hub-template/icon_background: "#f4f4f4"
      inputs:
        parameters:
          - name: CF_API_KEY_SECRET
          - name: PIPELINE_NAME
          - name: TRIGGER_NAME
          - name: CF_BRANCH
          - name: EXTRA_OPTIONS
            default: ''
          - name: VARIABLES
            default: ''
      script:
        name: main
        imagePullPolicy: Always
        image: codefresh/cli
        env:
          - name: VARIABLES
            value: '{{ inputs.parameters.VARIABLES }}'
          - name: CF_API_KEY
            valueFrom:
              secretKeyRef:
                name: '{{ inputs.parameters.CF_API_KEY_SECRET }}'
                key: token
        command: [sh]
        source: |
          codefresh \
          run \
          '{{ inputs.parameters.PIPELINE_NAME }}' \
          '-b={{ inputs.parameters.CF_BRANCH }}' \
          '-t={{ inputs.parameters.TRIGGER_NAME }}' \
          $(echo $VARIABLES | sed 's/,/ /g' | sed -E 's/(^|[ ])/ -v /g') \
          '{{ inputs.parameters.EXTRA_OPTIONS }}'
      nodeSelector:
        node-type: workflows-arm64
      tolerations:
      - key: codefresh.io
        operator: Equal
        value: workflows-arm64
        effect: NoSchedule

    - name: run-pipeline-local
      metadata:
        annotations:
          argo-hub-template/description: 'A wrapper on top of Codefresh cli run operation with sidecar DinD container'
          argo-hub-template/icon_url: "https://cdn.jsdelivr.net/gh/codefresh-io/argo-hub@main/workflows/codefresh-classic/assets/icon.svg"
          argo-hub-template/icon_background: "#f4f4f4"
      inputs:
        parameters:
          - name: CF_API_KEY_SECRET_REF_NAME
          - name: CF_API_KEY_SECRET_REF_KEY
          - name: PIPELINE_NAME
          - name: TRIGGER_NAME
            default: ""
          - name: BRANCH_NAME
            default: ""
          - name: CF_CLI_VERSION
            default: 'v0.87.3'
      initContainers:
        - name: cli
          image: alpine
          command:
            - /bin/sh
            - -c
            - |
              apk add curl
              OS_ARCH=$(uname -m)
              if [ "$OS_ARCH" = "x86_64" ]; then
                curl -sSL https://github.com/codefresh-io/cli/releases/download/${CF_CLI_VERSION}/codefresh-${CF_CLI_VERSION}-alpine-x64.tar.gz | \
                tar xvz && mv codefresh /opt/codefresh/
              elif [ "$OS_ARCH" = "aarch64" ]; then
                curl -sSL https://github.com/codefresh-io/cli/releases/download/${CF_CLI_VERSION}/codefresh-${CF_CLI_VERSION}-alpine-arm64.tar.gz | \
                tar xvz && mv codefresh /opt/codefresh/
              fi
          env:
          - name: CF_CLI_VERSION
            value: '{{ inputs.parameters.CF_CLI_VERSION }}'
          mirrorVolumeMounts: true
      script:
        name: main
        imagePullPolicy: Always
        image: docker:26.0-dind
        env:
        - name: CF_API_KEY
          valueFrom:
            secretKeyRef:
              name: '{{ inputs.parameters.CF_API_KEY_SECRET_REF_NAME }}'
              key: '{{ inputs.parameters.CF_API_KEY_SECRET_REF_KEY }}'
        - name: PIPELINE_NAME
          value: '{{ inputs.parameters.PIPELINE_NAME }}'
        - name: TRIGGER_NAME
          value: '{{ inputs.parameters.TRIGGER_NAME }}'

        securityContext:
          privileged: true
        volumeMounts:
          - name: cli
            mountPath: /opt/codefresh/
        command: ["/bin/sh"]
        source: |
          set -x
          EXTRA_FLAGS=""

          if [ -n "$TRIGGER_NAME" ]; then
            EXTRA_FLAGS="$EXTRA_FLAGS --trigger=$TRIGGER_NAME"
          fi
          if [ -n "$BRANCH_NAME" ]; then
            EXTRA_FLAGS="$EXTRA_FLAGS --branch=$BRANCH_NAME"
          fi

          CLI_COMMAND="/opt/codefresh/codefresh run $PIPELINE_NAME --local$EXTRA_FLAGS"

          dockerd &

          eval "$CLI_COMMAND"
